require "fileutils"
include FileUtils

if ARGV.empty?
  puts "Usage: rope project_name"
  exit
end
project = ARGV[0]

RAKEFILE = <<-EOS
require "rubygems" rescue LoadError nil  
require "rake/testtask"

task :default => [:test]

Rake::TestTask.new do |test|
  test.libs       << "test"
  test.pattern = 'test/**/tc_*.rb'
  test.verbose    =  true
end

EOS

CONFIG = <<-EOS
require "ruport"

# For details, see Ruport::Config documentation
Ruport.configure { |c|
  c.source :default, :user     => "root", 
                     :dsn      =>  "dbi:mysql:mydb"
  c.log_file "log/ruport.log"
}

EOS

BUILD = '

def format_class_name(string)
  string.downcase.split("_").map { |s| s.capitalize }.join
end

exit unless ARGV.length > 1

class_name = format_class_name(ARGV[1])

exit if File.exist? "app/reports/#{ARGV[1]}.rb"
if ARGV[0].eql? "report"
  File.open("app/reports.rb", "a") { |f| 
    f << "require \"app/reports/#{ARGV[1]}\""
  }
REP = <<-EOR
require "rubygems" rescue LoadError nil  
require "ruport"
require "config/ruport_config"

class #{class_name} < Ruport::Report
  
  #optional
  prepare { }
  
  #mandatory
  generate { }

  #optional
  cleanup  { }

end

##{class_name}.run { |res| puts res.results }
EOR

TEST = <<-EOR
require "rubygems" rescue LoadError nil  
require "ruport"
require "test/unit"
require "app/reports/#{ARGV[1]}"
require "config/ruport_config"

class Test#{class_name} < Test::Unit::TestCase
  def test_flunk
    flunk "Write your real tests here or in any test/tc_* file"
  end
end
EOR
  File.open("app/reports/#{ARGV[1]}.rb", "w") { |f| f << REP }
  File.open("test/tc_#{ARGV[1]}.rb","w") { |f| f << TEST } 
end
'

SQL_EXEC = '
require "rubygems" rescue LoadError nil  
require "ruport"
require "config/ruport_config"

puts Ruport::Query.new(ARGF.read).result
'

mkdir project

%w[test config output data app app/reports templates sql log util].each do |d|
  mkdir "#{project}/#{d}"
end


touch("#{project}/app/reports.rb")
File.open("#{project}/config/ruport_config.rb","w") { |f| f << CONFIG }
File.open("#{project}/Rakefile","w") { |f| f << RAKEFILE }
File.open("#{project}/util/build.rb","w") { |f| f << BUILD }
File.open("#{project}/util/sql_exec.rb","w") { |f| f << SQL_EXEC }




